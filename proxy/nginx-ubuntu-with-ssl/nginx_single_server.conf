# Here it is a single domain server. With no other sub domain.
# Here domain => http://example.com, http://api.example.com  
# Proxy Node server domain => http://localhost:5000
# Static image, documents file location => /usr/app/data
# Static files html, css, javascript => /usr/app

# If 80 request redirect to 443
# Redirect to https if http
server {
    listen 80;
    listen [::]:80;
    server_name example.com;
    return 301 https://example.com$request_uri;
}

server {
    # Here default_server means this server will be selected if other not get selected.
    # ssl with http2. http2 only works with ssl
    listen              443 ssl http2 default_server;
    listen              [::]:443 ssl http2 default_server;
    server_name         example.com;

    # Stop returning the version number of nginx
    server_tokens           off;

    # sendfile will enable to directly serving file to user without loading it to buffer. It will remove
    # process of user mode and kernel mode. As a result it will be fast. tcp_onpush will send HTTP header
    # after the chunk will send to sendfile() syscall
    sendfile                on;
    tcp_nopush              on;
    sendfile_max_chunk      1m;

    # Keep alive timeout for ssl certificate
    keepalive_timeout       75;       

    # Compression on => for the static files
    gzip                on;
    gzip_comp_level     3;
    gzip_types          text/plain text/css application/javascript application/pdf application/zip image/* audio/* video/*;

    # Serving static files for web applications
    # index => it is used for default file for a directory when try files detected it as directory.
    # try_files => if $uri don't exits then $uri/, if $uri/ don't exists than /index.html will be served.
    location / {
        root                /usr/app;
        index               index.html index.htm;
        try_files           $uri $uri/ /index.html;
    }

    # Serving images that stored on the server. This can also be done by static hosting
    location ~* ^/(image|data)/ {
        root                /usr/app/data;
    }

    # Forward to a node server. 
    location ~* ^/api/v1/ {
        proxy_pass          http://localhost:5000;

        # http_version by default is 1.0 but 1.1 will have keepalive connections.
        proxy_http_version  1.1;
        # Upgrage & Connection will help to upgrade the protocol from https to different protocol like websocket.
        proxy_set_header    Upgrade $http_upgrade;
        proxy_set_header    Connection 'Upgrade';
        # Passing the host info.
        proxy_set_header    Host $host;
        # under which the response will not be taken from a cache.
        proxy_cache_bypass  $http_upgrade;
    }
}