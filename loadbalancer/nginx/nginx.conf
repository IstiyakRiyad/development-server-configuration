# Here it is a single domain server. With no other sub domain.
# Here domain => http://api.example.com  
# Proxy Node server domain => http://localhost:5000
# Load servers
#           backend1.example.com
#           backend2.example.com
#           backend3.example.com
#           backend4.example.com
#           192.0.0.1

# If 80 request redirect to 443
# Redirect to https if http
server {
    listen 80;
    listen [::]:80;
    server_name api.example.com;
    return 301 https://api.example.com$request_uri;
}


server {
    # ssl with http2. http2 only works with ssl
    listen              443 ssl http2;
    listen              [::]:443 ssl http2;
    server_name         api.example.com;

    # SSL config
    # ssl_ciphers is the methods to encrypt the data after tls.
    # The ssl_protocols are the process of tls handshake.
    ssl_certificate         /etc/letsencrypt/live/api.example.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/api.example.com/privkey.pem;
    ssl_ciphers             EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
    ssl_protocols           TLSv1.1 TLSv1.2 TLSv1.3;

    # Forward to a node server. 
    location ~* ^/api/v1/ {
        proxy_pass          http://backend:5000;

        # http_version by default is 1.0 but 1.1 will have keepalive connections.
        proxy_http_version  1.1;
        # Upgrage & Connection will help to upgrade the protocol from https to different protocol like websocket.
        proxy_set_header    Upgrade $http_upgrade;
        proxy_set_header    Connection 'Upgrade';
        # Passing the host info.
        proxy_set_header    Host $host;
        # under which the response will not be taken from a cache.
        proxy_cache_bypass  $http_upgrade;
    }
}


upstream backend {
    server backend1.example.com;
    server backend2.example.com;
    server backend3.example.com;
    server backend4.example.com;
    server 192.0.0.1 backup;
}